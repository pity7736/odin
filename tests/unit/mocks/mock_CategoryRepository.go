// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	categorymodel "raiseexception.dev/odin/src/accounting/domain/category"

	mock "github.com/stretchr/testify/mock"
)

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, category
func (_m *MockCategoryRepository) Add(ctx context.Context, category *categorymodel.Category) error {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *categorymodel.Category) error); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCategoryRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - category *categorymodel.Category
func (_e *MockCategoryRepository_Expecter) Add(ctx interface{}, category interface{}) *MockCategoryRepository_Add_Call {
	return &MockCategoryRepository_Add_Call{Call: _e.mock.On("Add", ctx, category)}
}

func (_c *MockCategoryRepository_Add_Call) Run(run func(ctx context.Context, category *categorymodel.Category)) *MockCategoryRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*categorymodel.Category))
	})
	return _c
}

func (_c *MockCategoryRepository_Add_Call) Return(_a0 error) *MockCategoryRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_Add_Call) RunAndReturn(run func(context.Context, *categorymodel.Category) error) *MockCategoryRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockCategoryRepository) GetAll(ctx context.Context) []*categorymodel.Category {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*categorymodel.Category
	if rf, ok := ret.Get(0).(func(context.Context) []*categorymodel.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*categorymodel.Category)
		}
	}

	return r0
}

// MockCategoryRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockCategoryRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryRepository_Expecter) GetAll(ctx interface{}) *MockCategoryRepository_GetAll_Call {
	return &MockCategoryRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockCategoryRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockCategoryRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCategoryRepository_GetAll_Call) Return(_a0 []*categorymodel.Category) *MockCategoryRepository_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepository_GetAll_Call) RunAndReturn(run func(context.Context) []*categorymodel.Category) *MockCategoryRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
