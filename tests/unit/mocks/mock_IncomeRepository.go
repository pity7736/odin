// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	incomemodel "raiseexception.dev/odin/src/accounting/domain/incomemodel"
)

// MockIncomeRepository is an autogenerated mock type for the IncomeRepository type
type MockIncomeRepository struct {
	mock.Mock
}

type MockIncomeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIncomeRepository) EXPECT() *MockIncomeRepository_Expecter {
	return &MockIncomeRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, income
func (_m *MockIncomeRepository) Add(ctx context.Context, income *incomemodel.Income) error {
	ret := _m.Called(ctx, income)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *incomemodel.Income) error); ok {
		r0 = rf(ctx, income)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIncomeRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockIncomeRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - income *incomemodel.Income
func (_e *MockIncomeRepository_Expecter) Add(ctx interface{}, income interface{}) *MockIncomeRepository_Add_Call {
	return &MockIncomeRepository_Add_Call{Call: _e.mock.On("Add", ctx, income)}
}

func (_c *MockIncomeRepository_Add_Call) Run(run func(ctx context.Context, income *incomemodel.Income)) *MockIncomeRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*incomemodel.Income))
	})
	return _c
}

func (_c *MockIncomeRepository_Add_Call) Return(_a0 error) *MockIncomeRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIncomeRepository_Add_Call) RunAndReturn(run func(context.Context, *incomemodel.Income) error) *MockIncomeRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIncomeRepository creates a new instance of MockIncomeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIncomeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIncomeRepository {
	mock := &MockIncomeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
